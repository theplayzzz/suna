version: "3.9"

################
#  VOLUMES     #
################
volumes:
  redis-data:

################
#  NETWORKS    #
################
networks:
  traefik_public:           # rede onde o Traefik está
    external: true
    name: externa
  app_network:              # rede isolada para Redis ⇆ Suna
    external: true
    name: interna

############
# SERVICES #
############
services:

  redis:
    image: redis:7-alpine
    command: ["redis-server","--save","60","1","--loglevel","warning"]
    volumes:
      - redis-data:/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD","redis-cli","ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      restart_policy:
        condition: on-failure

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    networks:
      - app_network
      - traefik_public
    depends_on:
      - redis
    environment:          # valores vêm da UI do Portainer
      NEXT_PUBLIC_URL: ${NEXT_PUBLIC_URL}
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
      REDIS_HOST: redis
      REDIS_PORT: "6379"
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_SSL: "False"
      DAYTONA_API_KEY: ${DAYTONA_API_KEY}
      DAYTONA_SERVER_URL: ${DAYTONA_SERVER_URL}
      DAYTONA_TARGET: ${DAYTONA_TARGET}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      TAVILY_API_KEY: ${TAVILY_API_KEY}
      FIRECRAWL_API_KEY: ${FIRECRAWL_API_KEY}
      RAPID_API_KEY: ${RAPID_API_KEY}
    expose:
      - "8000"
    deploy:
      mode: replicated
      replicas: 1
      labels:
        - traefik.enable=true
        - traefik.http.routers.suna-api.rule=Host(`expertiapi.gruporudigo.com`)
        - traefik.http.routers.suna-api.entrypoints=websecure
        - traefik.http.routers.suna-api.tls.certresolver=le
        - traefik.http.services.suna-api.loadbalancer.server.port=8000
      restart_policy:
        condition: on-failure

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    networks:
      - app_network
      - traefik_public
    depends_on:
      - backend
    environment:
      NEXT_PUBLIC_URL: ${NEXT_PUBLIC_URL}
      NEXT_PUBLIC_SUPABASE_URL: ${SUPABASE_URL}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      NEXT_PUBLIC_BACKEND_URL: "http://backend:8000/api"
      NODE_ENV: production
    expose:
      - "3000"
    command: ["npm","run","start"]
    deploy:
      mode: replicated
      replicas: 1
      labels:
        - traefik.enable=true
        - traefik.http.routers.suna.rule=Host(`expertia.gruporudigo.com`)
        - traefik.http.routers.suna.entrypoints=websecure
        - traefik.http.routers.suna.tls.certresolver=le
        - traefik.http.services.suna.loadbalancer.server.port=3000
      restart_policy:
        condition: on-failure
